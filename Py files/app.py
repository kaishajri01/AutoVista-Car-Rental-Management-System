# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from voit import Ui_Dialog as ajout
from suppvoit import Ui_Dialog as supp
from modifvoit import Ui_Dialog as modif
from rechvoit import Ui_Dialog as rech
from enreclient import Ui_Dialog as enrecli
from suppclient import Ui_Dialog as suppcli
from modifclient import Ui_Dialog as modifcli
from rechclient import Ui_Dialog as rechcli
from ajoutcont import Ui_Dialog as ajoutcon
from affvoit import Ui_Dialog as affvoi
from affclient import Ui_Dialog as affcli
from acceuil import Ui_Dialog as acce
from affcontrat import Ui_Dialog as affcont
from suppcont import Ui_Dialog as supcont
from modifcont import Ui_Dialog as modicon
from rechcontr import Ui_Dialog as rechcontra
from Voiture import *
from Client import *
from Contrat import *

class Ui_MainWindow(object):

    chv=0
    chc=0
    chco=0
    enrev=0
    enrec=0
    enreco=0
     
    def __init__(self,Agence):
        self.Agence=Agence
    
    def showDialog(self,str,bool):
        msgBox = QMessageBox()
        if bool==False:
            msgBox.setIcon(QMessageBox.Warning)
        else:
            msgBox.setIcon(QMessageBox.Information)
        msgBox.setText(str)
        msgBox.setWindowTitle("Advertissement")
        msgBox.setStandardButtons(QMessageBox.Ok)
        msgBox.exec()


    def parsevoit(self,line):
        lis=line.split(";")
        #lis[4]=lis[4].replace("\n","")
        #lis[4]=lis[4]
        return Voiture(lis[0],lis[1],lis[2],lis[3],lis[4])

    def parsecli(self,line):
        lis=line.split(";")
        #lis[6]=lis[6].replace("\n","")
        return Client(lis[0],lis[1],lis[2],lis[3],lis[4],lis[5],lis[6])

    def parsecont(self,line):
        lis=line.split(";")
        #lis[5]=lis[5].replace("\n","")
        #lis[5]=lis[5]
        return lis[1],lis[2],lis[3],lis[4]

    #Chargement de tous les fichiers#
    def chargtous(self):
        if Ui_MainWindow.chco==1 or Ui_MainWindow.chc==1 or Ui_MainWindow.chv==1:
            self.showDialog("Opération Invalide",False)
            return
        #voit#

        self.Agence.Parc.parc.clear()
        F=open("fichvoit.csv","r")
        count=-1
        for line in F:
            count+=1
            self.Agence.Parc.parc.append(self.parsevoit(line))    
        F.close()
        Ui_MainWindow.chv=1

        #client#
        self.Agence.ListeClient.liste.clear()
        F=open("fichclient.csv","r")
        count=-1
        for line in F:
            count+=1
            self.Agence.ListeClient.liste.append(self.parsecli(line))    
        F.close()
        Ui_MainWindow.chc=1

        #contrat#
        self.Agence.ListeContrat.listecont.clear()
        F=open("fichcontrat.csv","r")
        count=-1
        for line in F:
            count+=1
            l1,l2,l3,l4=self.parsecont(line)
            self.Agence.ListeContrat.ajout_contrat(l1,l2,l3,l4)
            #self.Agence.ListeContrat.listecont.append(self.parsecont(line))    
        F.close()
        Ui_MainWindow.chco=1
        self.showDialog("Chargement Terminée !",True)

        #Enregistrement de tous les fichiers#
    def enretous(self):
        #enre client#
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return

        F=open("fichclient.csv","w+")
        F.seek(0)
        for i in self.Agence.ListeClient.liste:
            F.write(i.cin+";"+i.nom+";"+i.prenom+";"+i.age+";"+i.adresse+";"+i.mail+";"+i.tlf)
        F.close()
        
        #enre voit#
        F=open("fichvoit.csv","w+")
        F.seek(0)
        for i in self.Agence.Parc.parc:
            F.write(i.matricule+";"+i.marque+";"+i.couleur+";"+i.date+";"+i.prix)
        F.close()

        #enre cont#
        F=open("fichcontrat.csv","w+")
        F.seek(0)
        for i in self.Agence.ListeContrat.listecont:
            F.write(i.numero+";"+i.cin+";"+i.matr+";"+i.date+";"+i.duree+";"+i.montant+"\n")
        F.close()

        Ui_MainWindow.enrec=1
        Ui_MainWindow.enreco=1
        Ui_MainWindow.enrev=1
        self.showDialog("Enregistrement Terminée !",True)
        

    ## Chargement Contrat ##
    def chargcontrat(self):
        if  Ui_MainWindow.chco==1:
            self.showDialog("Les Données Sont Chargées !",False)
            return
        if  Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 :
            self.showDialog("Chargez Les Clients et Les Voitures Tout D'abord !",False)
            return
        self.Agence.ListeContrat.listecont.clear()
        F=open("fichcontrat.csv","r")
        count=-1
        for line in F:
            count+=1
            l1,l2,l3,l4=self.parsecont(line)
            self.Agence.ListeContrat.ajout_contrat(l1,l2,l3,l4)
            #self.Agence.ListeContrat.listecont.append(self.parsecont(line))    
        F.close()
        Ui_MainWindow.chco=1
        self.showDialog("Chargement Terminée !",True)

    ## enregistrement contrat ##
    def enregiscont(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return

        F=open("fichcontrat.csv","w+")
        F.seek(0)
        for i in self.Agence.ListeContrat.listecont:
            F.write(i.numero+";"+i.cin+";"+i.matr+";"+i.date+";"+i.duree+";"+i.montant)
        F.close()
        Ui_MainWindow.enreco=1
        self.showDialog("Enregistrement Terminée !",True)


    ## enregistrement client ##
    def enregisclient(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        F=open("fichclient.csv","w+")
        F.seek(0)
        for i in self.Agence.ListeClient.liste:
            F.write(i.cin+";"+i.nom+";"+i.prenom+";"+i.age+";"+i.adresse+";"+i.mail+";"+i.tlf)
        F.close()
        Ui_MainWindow.enrec=1
        self.showDialog("Enregistrement Terminée !",True)

    ## Chargement Client ##

    def chargclient(self):
        if  Ui_MainWindow.chc==1:
            self.showDialog("Les Données Sont Chargées !",False)
            return
        self.Agence.ListeClient.liste.clear()
        F=open("fichclient.csv","r")
        count=-1
        for line in F:
            count+=1
            self.Agence.ListeClient.liste.append(self.parsecli(line))    
        F.close()
        Ui_MainWindow.chc=1
        self.showDialog("Chargement Terminée !",True)



    
    ## enregistrement Voiture ##
    def enregisvoit(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        F=open("fichvoit.csv","w+")
        F.seek(0)
        for i in self.Agence.Parc.parc:
            F.write(i.matricule+";"+i.marque+";"+i.couleur+";"+i.date+";"+i.prix)
        Ui_MainWindow.enrev=1
        F.close()
        self.showDialog("Enregistrement Terminée !",True)

    ## Chargement Voiture ##
    def chargvoit(self):
        if Ui_MainWindow.chv==1:
            self.showDialog("Les Données Sont Chargées !",False)
            return
        self.Agence.Parc.parc.clear()
        F=open("fichvoit.csv","r")
        count=-1
        for line in F:
            count+=1
            self.Agence.Parc.parc.append(self.parsevoit(line))    
        F.close()
        Ui_MainWindow.chv=1
        self.showDialog("Chargement Terminée !",True)

    def princ(self):
        self.windowacc=QDialog()
        self.ui=acce(self.Agence)
        self.ui.setupUi(self.windowacc)
        self.stackedWidget.addWidget(self.windowacc)
        self.stackedWidget.setCurrentWidget(self.windowacc)
    def rechcont(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowrechcont=QDialog()
        self.ui=rechcontra(self.Agence)
        self.ui.setupUi(self.windowrechcont)
        self.stackedWidget.addWidget(self.windowrechcont)
        self.stackedWidget.setCurrentWidget(self.windowrechcont)


    def modifcont(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowmodicont=QDialog()
        self.ui=modicon(self.Agence)
        self.ui.setupUi(self.windowmodicont)
        self.stackedWidget.addWidget(self.windowmodicont)
        self.stackedWidget.setCurrentWidget(self.windowmodicont)

    def suppcont(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowsupcont=QDialog()
        self.ui=supcont(self.Agence)
        self.ui.setupUi(self.windowsupcont)
        self.stackedWidget.addWidget(self.windowsupcont)
        self.stackedWidget.setCurrentWidget(self.windowsupcont)

    def affcont(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowaffcont=QDialog()
        self.ui=affcont(self.Agence)
        self.ui.setupUi(self.windowaffcont)
        self.stackedWidget.addWidget(self.windowaffcont)
        self.stackedWidget.setCurrentWidget(self.windowaffcont)

    def affvoi(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowaffvoit=QDialog()
        self.ui=affvoi(self.Agence)
        self.ui.setupUi(self.windowaffvoit)
        self.stackedWidget.addWidget(self.windowaffvoit)
        self.stackedWidget.setCurrentWidget(self.windowaffvoit)

    def affcli(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowaffcli=QDialog()
        self.ui=affcli(self.Agence)
        self.ui.setupUi(self.windowaffcli)
        self.stackedWidget.addWidget(self.windowaffcli)
        self.stackedWidget.setCurrentWidget(self.windowaffcli)

    def ajoutcont(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowajoutcont=QDialog()
        self.ui=ajoutcon(self.Agence)
        self.ui.setupUi(self.windowajoutcont)
        self.stackedWidget.addWidget(self.windowajoutcont)
        self.stackedWidget.setCurrentWidget(self.windowajoutcont)


    def rechclient(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowrechclient=QDialog()
        self.ui=rechcli(self.Agence)
        self.ui.setupUi(self.windowrechclient)
        self.stackedWidget.addWidget(self.windowrechclient)
        self.stackedWidget.setCurrentWidget(self.windowrechclient)


    def modifclient(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowmodifclient=QDialog()
        self.ui=modifcli(self.Agence)
        self.ui.setupUi(self.windowmodifclient)
        self.stackedWidget.addWidget(self.windowmodifclient)
        self.stackedWidget.setCurrentWidget(self.windowmodifclient)

    def suppclient(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowsuppclient=QDialog()
        self.ui=suppcli(self.Agence)
        self.ui.setupUi(self.windowsuppclient)
        self.stackedWidget.addWidget(self.windowsuppclient)
        self.stackedWidget.setCurrentWidget(self.windowsuppclient)

    def enreclient(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowajouterclient=QDialog()
        self.ui=enrecli(self.Agence)
        self.ui.setupUi(self.windowajouterclient)
        self.stackedWidget.addWidget(self.windowajouterclient)
        self.stackedWidget.setCurrentWidget(self.windowajouterclient)

    def ajoutervoiture(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowajouter=QDialog()
        self.ui=ajout(self.Agence)
        self.ui.setupUi(self.windowajouter)
        self.stackedWidget.addWidget(self.windowajouter)
        self.stackedWidget.setCurrentWidget(self.windowajouter)

    def supprimervoiture(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowsupprimer=QDialog()
        self.ui=supp(self.Agence)
        self.ui.setupUi(self.windowsupprimer)
        self.stackedWidget.addWidget(self.windowsupprimer)
        self.stackedWidget.setCurrentWidget(self.windowsupprimer)
    
    def modofiervoiture(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowmodifier=QDialog()
        self.ui=modif(self.Agence)
        self.ui.setupUi(self.windowmodifier)
        self.stackedWidget.addWidget(self.windowmodifier)
        self.stackedWidget.setCurrentWidget(self.windowmodifier)
        

    def recherchevoiture(self):
        if Ui_MainWindow.chv==0 or Ui_MainWindow.chc==0 or Ui_MainWindow.chco==0:
            self.showDialog("Le Chargement de tous les fichiers est Requis !",False)
            return
        self.windowrech=QDialog()
        self.ui=rech(self.Agence)
        self.ui.setupUi(self.windowrech)
        self.stackedWidget.addWidget(self.windowrech)
        self.stackedWidget.setCurrentWidget(self.windowrech)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Gesion De Location")
        MainWindow.resize(1395, 832)
        font = QtGui.QFont()
        font.setFamily("Arial Narrow")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setKerning(False)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("color:black\n"
"\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(True)
        font.setWeight(75)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 1401, 801))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.stackedWidget.addWidget(self.page_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1395, 26))
        self.menubar.setObjectName("menubar")
        self.menuGestion_De_Parc_Automobile = QtWidgets.QMenu(self.menubar)
        self.menuGestion_De_Parc_Automobile.setObjectName("menuGestion_De_Parc_Automobile")
        self.menuMise_Jour_du_Parc = QtWidgets.QMenu(self.menuGestion_De_Parc_Automobile)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.menuMise_Jour_du_Parc.setFont(font)
        self.menuMise_Jour_du_Parc.setObjectName("menuMise_Jour_du_Parc")
        self.menuRecherche_et_Affichage = QtWidgets.QMenu(self.menuGestion_De_Parc_Automobile)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.menuRecherche_et_Affichage.setFont(font)
        self.menuRecherche_et_Affichage.setObjectName("menuRecherche_et_Affichage")
        self.menuGestion_Des_Clients = QtWidgets.QMenu(self.menubar)
        self.menuGestion_Des_Clients.setObjectName("menuGestion_Des_Clients")
        self.menuMise_jour_De_la_Liste_Des_Clients = QtWidgets.QMenu(self.menuGestion_Des_Clients)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.menuMise_jour_De_la_Liste_Des_Clients.setFont(font)
        self.menuMise_jour_De_la_Liste_Des_Clients.setObjectName("menuMise_jour_De_la_Liste_Des_Clients")
        self.menuRecherche_Affichage_et_Trie = QtWidgets.QMenu(self.menuGestion_Des_Clients)
        self.menuRecherche_Affichage_et_Trie.setObjectName("menuRecherche_Affichage_et_Trie")
        self.menuGestion_Des_Locations = QtWidgets.QMenu(self.menubar)
        self.menuGestion_Des_Locations.setObjectName("menuGestion_Des_Locations")
        self.menuMise_jour = QtWidgets.QMenu(self.menuGestion_Des_Locations)
        self.menuMise_jour.setObjectName("menuMise_jour")
        self.menuRecherche_et_Affichage_2 = QtWidgets.QMenu(self.menuGestion_Des_Locations)
        self.menuRecherche_et_Affichage_2.setObjectName("menuRecherche_et_Affichage_2")
        self.menuLes_Fichiers = QtWidgets.QMenu(self.menubar)
        self.menuLes_Fichiers.setObjectName("menuLes_Fichiers")
        self.menuParc_Automobile = QtWidgets.QMenu(self.menuLes_Fichiers)
        self.menuParc_Automobile.setObjectName("menuParc_Automobile")
        self.menuLes_Clients = QtWidgets.QMenu(self.menuLes_Fichiers)
        self.menuLes_Clients.setObjectName("menuLes_Clients")
        self.menuLes_Locations = QtWidgets.QMenu(self.menuLes_Fichiers)
        self.menuLes_Locations.setObjectName("menuLes_Locations")
        self.menuAcceuil = QtWidgets.QMenu(self.menubar)
        self.menuAcceuil.setObjectName("menuAcceuil")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAjout_un_Nouvel_Client = QtWidgets.QAction(MainWindow)
        self.actionAjout_un_Nouvel_Client.setObjectName("actionAjout_un_Nouvel_Client")
        self.actionSupprimer_Un_Client = QtWidgets.QAction(MainWindow)
        self.actionSupprimer_Un_Client.setObjectName("actionSupprimer_Un_Client")
        self.actionModifier_l_Adresse = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.actionModifier_l_Adresse.setFont(font)
        self.actionModifier_l_Adresse.setObjectName("actionModifier_l_Adresse")
        self.actionModifier_N_T_l_phone = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.actionModifier_N_T_l_phone.setFont(font)
        self.actionModifier_N_T_l_phone.setObjectName("actionModifier_N_T_l_phone")
        self.actionModifier_le_Mail = QtWidgets.QAction(MainWindow)
        self.actionModifier_le_Mail.setObjectName("actionModifier_le_Mail")
        self.actionAffichage = QtWidgets.QAction(MainWindow)
        self.actionAffichage.setObjectName("actionAffichage")
        self.actionRecherche_par_CIN = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_CIN.setObjectName("actionRecherche_par_CIN")
        self.actionAjouter_Voiture = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Myanmar Text")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.actionAjouter_Voiture.setFont(font)
        self.actionAjouter_Voiture.setObjectName("actionAjouter_Voiture")
        self.actionSupression_par_Matricule = QtWidgets.QAction(MainWindow)
        self.actionSupression_par_Matricule.setObjectName("actionSupression_par_Matricule")
        self.actionSupression_par_Marque = QtWidgets.QAction(MainWindow)
        self.actionSupression_par_Marque.setObjectName("actionSupression_par_Marque")
        self.actionSupression_Voitures_Ag_es = QtWidgets.QAction(MainWindow)
        self.actionSupression_Voitures_Ag_es.setObjectName("actionSupression_Voitures_Ag_es")
        self.actionModification_Du_Prix = QtWidgets.QAction(MainWindow)
        self.actionModification_Du_Prix.setObjectName("actionModification_Du_Prix")
        self.actionModification_Couleur = QtWidgets.QAction(MainWindow)
        self.actionModification_Couleur.setObjectName("actionModification_Couleur")
        self.actionAffichage_2 = QtWidgets.QAction(MainWindow)
        self.actionAffichage_2.setObjectName("actionAffichage_2")
        self.actionPar_Matricule = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.actionPar_Matricule.setFont(font)
        self.actionPar_Matricule.setObjectName("actionPar_Matricule")
        self.actionPar_Marque = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.actionPar_Marque.setFont(font)
        self.actionPar_Marque.setObjectName("actionPar_Marque")
        self.actionPar_Couleur = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.actionPar_Couleur.setFont(font)
        self.actionPar_Couleur.setObjectName("actionPar_Couleur")
        self.actionDes_Voitures_Disponibles = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.actionDes_Voitures_Disponibles.setFont(font)
        self.actionDes_Voitures_Disponibles.setObjectName("actionDes_Voitures_Disponibles")
        self.actionDes_Voitures_Lou_es = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.actionDes_Voitures_Lou_es.setFont(font)
        self.actionDes_Voitures_Lou_es.setObjectName("actionDes_Voitures_Lou_es")
        self.actionDes_Voitures_Lou_es_entre_2_Dates = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.actionDes_Voitures_Lou_es_entre_2_Dates.setFont(font)
        self.actionDes_Voitures_Lou_es_entre_2_Dates.setObjectName("actionDes_Voitures_Lou_es_entre_2_Dates")
        self.actionAjouter_une_nouvelle_Location = QtWidgets.QAction(MainWindow)
        self.actionAjouter_une_nouvelle_Location.setObjectName("actionAjouter_une_nouvelle_Location")
        self.actionSupprimer_une_Location = QtWidgets.QAction(MainWindow)
        self.actionSupprimer_une_Location.setObjectName("actionSupprimer_une_Location")
        self.actionModifier_la_Date_de_Location = QtWidgets.QAction(MainWindow)
        self.actionModifier_la_Date_de_Location.setObjectName("actionModifier_la_Date_de_Location")
        self.actionModifier_la_Dur_e = QtWidgets.QAction(MainWindow)
        self.actionModifier_la_Dur_e.setObjectName("actionModifier_la_Dur_e")
        self.actionAffichage_3 = QtWidgets.QAction(MainWindow)
        self.actionAffichage_3.setObjectName("actionAffichage_3")
        self.actionpar_CIN = QtWidgets.QAction(MainWindow)
        self.actionpar_CIN.setObjectName("actionpar_CIN")
        self.actionpar_Matricule = QtWidgets.QAction(MainWindow)
        self.actionpar_Matricule.setObjectName("actionpar_Matricule")
        self.actionpar_Date_Donn_e = QtWidgets.QAction(MainWindow)
        self.actionpar_Date_Donn_e.setObjectName("actionpar_Date_Donn_e")
        self.actionpar_Dur_e_de_Location = QtWidgets.QAction(MainWindow)
        self.actionpar_Dur_e_de_Location.setObjectName("actionpar_Dur_e_de_Location")
        self.actionpar_Location_entre_2_Dates = QtWidgets.QAction(MainWindow)
        self.actionpar_Location_entre_2_Dates.setObjectName("actionpar_Location_entre_2_Dates")
        self.actionEnregistrement_Fichier_Voitures = QtWidgets.QAction(MainWindow)
        self.actionEnregistrement_Fichier_Voitures.setObjectName("actionEnregistrement_Fichier_Voitures")
        self.actionR_cup_ration_Fichier_Voitures = QtWidgets.QAction(MainWindow)
        self.actionR_cup_ration_Fichier_Voitures.setObjectName("actionR_cup_ration_Fichier_Voitures")
        self.actionEnregistrement_Fichier_Client = QtWidgets.QAction(MainWindow)
        self.actionEnregistrement_Fichier_Client.setObjectName("actionEnregistrement_Fichier_Client")
        self.actionR_cup_ration_Fichier_Client = QtWidgets.QAction(MainWindow)
        self.actionR_cup_ration_Fichier_Client.setObjectName("actionR_cup_ration_Fichier_Client")
        self.actionEnregistrement_Fichier_Location = QtWidgets.QAction(MainWindow)
        self.actionEnregistrement_Fichier_Location.setObjectName("actionEnregistrement_Fichier_Location")
        self.actionR_cup_ration_Fichier_Location = QtWidgets.QAction(MainWindow)
        self.actionR_cup_ration_Fichier_Location.setObjectName("actionR_cup_ration_Fichier_Location")
        self.actionsupprimer_Voiture = QtWidgets.QAction(MainWindow)
        self.actionsupprimer_Voiture.setObjectName("actionsupprimer_Voiture")
        self.actionmodifier_Voiture = QtWidgets.QAction(MainWindow)
        self.actionmodifier_Voiture.setObjectName("actionmodifier_Voiture")
        self.actionRecherche = QtWidgets.QAction(MainWindow)
        self.actionRecherche.setObjectName("actionRecherche")
        self.actionModifier_un_Client = QtWidgets.QAction(MainWindow)
        self.actionModifier_un_Client.setObjectName("actionModifier_un_Client")
        self.actionModifier_une_Location = QtWidgets.QAction(MainWindow)
        self.actionModifier_une_Location.setObjectName("actionModifier_une_Location")
        self.actionRecherche_2 = QtWidgets.QAction(MainWindow)
        self.actionRecherche_2.setObjectName("actionRecherche_2")
        self.actionPage_Principale = QtWidgets.QAction(MainWindow)
        self.actionPage_Principale.setObjectName("actionPage_Principale")
        self.actionR_cup_rer_Tous = QtWidgets.QAction(MainWindow)
        self.actionR_cup_rer_Tous.setObjectName("actionR_cup_rer_Tous")
        self.actionEnregistrer_Tous = QtWidgets.QAction(MainWindow)
        self.actionEnregistrer_Tous.setObjectName("actionEnregistrer_Tous")
        self.menuMise_Jour_du_Parc.addAction(self.actionAjouter_Voiture)
        self.menuMise_Jour_du_Parc.addAction(self.actionsupprimer_Voiture)
        self.menuMise_Jour_du_Parc.addAction(self.actionmodifier_Voiture)
        self.menuRecherche_et_Affichage.addAction(self.actionAffichage_2)
        self.menuRecherche_et_Affichage.addAction(self.actionRecherche)
        self.menuGestion_De_Parc_Automobile.addAction(self.menuMise_Jour_du_Parc.menuAction())
        self.menuGestion_De_Parc_Automobile.addAction(self.menuRecherche_et_Affichage.menuAction())
        self.menuMise_jour_De_la_Liste_Des_Clients.addAction(self.actionAjout_un_Nouvel_Client)
        self.menuMise_jour_De_la_Liste_Des_Clients.addAction(self.actionSupprimer_Un_Client)
        self.menuMise_jour_De_la_Liste_Des_Clients.addAction(self.actionModifier_un_Client)
        self.menuRecherche_Affichage_et_Trie.addAction(self.actionAffichage)
        self.menuRecherche_Affichage_et_Trie.addAction(self.actionRecherche_par_CIN)
        self.menuGestion_Des_Clients.addAction(self.menuMise_jour_De_la_Liste_Des_Clients.menuAction())
        self.menuGestion_Des_Clients.addAction(self.menuRecherche_Affichage_et_Trie.menuAction())
        self.menuMise_jour.addAction(self.actionAjouter_une_nouvelle_Location)
        self.menuMise_jour.addAction(self.actionSupprimer_une_Location)
        self.menuMise_jour.addAction(self.actionModifier_une_Location)
        self.menuRecherche_et_Affichage_2.addAction(self.actionAffichage_3)
        self.menuRecherche_et_Affichage_2.addAction(self.actionRecherche_2)
        self.menuGestion_Des_Locations.addAction(self.menuMise_jour.menuAction())
        self.menuGestion_Des_Locations.addAction(self.menuRecherche_et_Affichage_2.menuAction())
        self.menuParc_Automobile.addAction(self.actionEnregistrement_Fichier_Voitures)
        self.menuParc_Automobile.addAction(self.actionR_cup_ration_Fichier_Voitures)
        self.menuLes_Clients.addAction(self.actionEnregistrement_Fichier_Client)
        self.menuLes_Clients.addAction(self.actionR_cup_ration_Fichier_Client)
        self.menuLes_Locations.addAction(self.actionEnregistrement_Fichier_Location)
        self.menuLes_Locations.addAction(self.actionR_cup_ration_Fichier_Location)
        self.menuLes_Fichiers.addAction(self.menuParc_Automobile.menuAction())
        self.menuLes_Fichiers.addAction(self.menuLes_Clients.menuAction())
        self.menuLes_Fichiers.addAction(self.menuLes_Locations.menuAction())
        self.menuLes_Fichiers.addAction(self.actionR_cup_rer_Tous)
        self.menuLes_Fichiers.addAction(self.actionEnregistrer_Tous)
        self.menuAcceuil.addAction(self.actionPage_Principale)
        self.menubar.addAction(self.menuGestion_De_Parc_Automobile.menuAction())
        self.menubar.addAction(self.menuGestion_Des_Clients.menuAction())
        self.menubar.addAction(self.menuGestion_Des_Locations.menuAction())
        self.menubar.addAction(self.menuLes_Fichiers.menuAction())
        self.menubar.addAction(self.menuAcceuil.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #############
        self.windowacc=QDialog()
        self.ui=acce(self.Agence)
        self.ui.setupUi(self.windowacc)
        self.stackedWidget.addWidget(self.windowacc)
        self.stackedWidget.setCurrentWidget(self.windowacc)
        #############
        self.actionAjouter_Voiture.triggered.connect(self.ajoutervoiture)
        self.actionsupprimer_Voiture.triggered.connect(self.supprimervoiture)
        self.actionmodifier_Voiture.triggered.connect(self.modofiervoiture)
        self.actionRecherche.triggered.connect(self.recherchevoiture)
        self.actionAjout_un_Nouvel_Client.triggered.connect(self.enreclient)
        self.actionSupprimer_Un_Client.triggered.connect(self.suppclient)
        self.actionModifier_un_Client.triggered.connect(self.modifclient)
        self.actionRecherche_par_CIN.triggered.connect(self.rechclient)
        self.actionAjouter_une_nouvelle_Location.triggered.connect(self.ajoutcont)
        self.actionAffichage_2.triggered.connect(self.affvoi)
        self.actionAffichage.triggered.connect(self.affcli)
        self.actionAffichage_3.triggered.connect(self.affcont)
        self.actionSupprimer_une_Location.triggered.connect(self.suppcont)
        self.actionModifier_une_Location.triggered.connect(self.modifcont)
        self.actionRecherche_2.triggered.connect(self.rechcont)
        self.actionPage_Principale.triggered.connect(self.princ)

        self.actionR_cup_ration_Fichier_Voitures.triggered.connect(self.chargvoit)
        self.actionEnregistrement_Fichier_Voitures.triggered.connect(self.enregisvoit)

        self.actionR_cup_ration_Fichier_Client.triggered.connect(self.chargclient)
        self.actionEnregistrement_Fichier_Client.triggered.connect(self.enregisclient)

        self.actionR_cup_ration_Fichier_Location.triggered.connect(self.chargcontrat)
        self.actionEnregistrement_Fichier_Location.triggered.connect(self.enregiscont)

        self.actionR_cup_rer_Tous.triggered.connect(self.chargtous)
        self.actionEnregistrer_Tous.triggered.connect(self.enretous)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuGestion_De_Parc_Automobile.setTitle(_translate("MainWindow", "Gestion De Parc Automobile"))
        self.menuMise_Jour_du_Parc.setTitle(_translate("MainWindow", "Mise à jour"))
        self.menuRecherche_et_Affichage.setTitle(_translate("MainWindow", "Recherche et Affichage"))
        self.menuGestion_Des_Clients.setTitle(_translate("MainWindow", "Gestion Des Clients"))
        self.menuMise_jour_De_la_Liste_Des_Clients.setTitle(_translate("MainWindow", "Mise à jour "))
        self.menuRecherche_Affichage_et_Trie.setTitle(_translate("MainWindow", "Recherche et Affichage "))
        self.menuGestion_Des_Locations.setTitle(_translate("MainWindow", "Gestion Des Locations"))
        self.menuMise_jour.setTitle(_translate("MainWindow", "Mise à jour"))
        self.menuRecherche_et_Affichage_2.setTitle(_translate("MainWindow", "Recherche et Affichage"))
        self.menuLes_Fichiers.setTitle(_translate("MainWindow", "Enregistrement et Récupération"))
        self.menuParc_Automobile.setTitle(_translate("MainWindow", "Parc Automobile"))
        self.menuLes_Clients.setTitle(_translate("MainWindow", "Clients"))
        self.menuLes_Locations.setTitle(_translate("MainWindow", "Locations"))
        self.menuAcceuil.setTitle(_translate("MainWindow", "Acceuil"))
        self.actionAjout_un_Nouvel_Client.setText(_translate("MainWindow", "Ajouter Client"))
        self.actionSupprimer_Un_Client.setText(_translate("MainWindow", "Supprimer Client"))
        self.actionModifier_l_Adresse.setText(_translate("MainWindow", "Modifier l\'Adresse"))
        self.actionModifier_N_T_l_phone.setText(_translate("MainWindow", "Modifier N° Téléphone"))
        self.actionModifier_le_Mail.setText(_translate("MainWindow", "Modifier le Mail"))
        self.actionAffichage.setText(_translate("MainWindow", "Affichage"))
        self.actionRecherche_par_CIN.setText(_translate("MainWindow", "Recherche"))
        self.actionAjouter_Voiture.setText(_translate("MainWindow", "Ajouter Voiture"))
        self.actionSupression_par_Matricule.setText(_translate("MainWindow", "Supression par Matricule"))
        self.actionSupression_par_Marque.setText(_translate("MainWindow", "Supression  par Marque"))
        self.actionSupression_Voitures_Ag_es.setText(_translate("MainWindow", "Supression Voitures Agées"))
        self.actionModification_Du_Prix.setText(_translate("MainWindow", "Modification Du Prix"))
        self.actionModification_Couleur.setText(_translate("MainWindow", "Modification Du Couleur"))
        self.actionAffichage_2.setText(_translate("MainWindow", "Affichage"))
        self.actionPar_Matricule.setText(_translate("MainWindow", "Par Matricule"))
        self.actionPar_Marque.setText(_translate("MainWindow", "Par Marque"))
        self.actionPar_Couleur.setText(_translate("MainWindow", "Par Couleur"))
        self.actionDes_Voitures_Disponibles.setText(_translate("MainWindow", "Des Voitures Disponibles"))
        self.actionDes_Voitures_Lou_es.setText(_translate("MainWindow", "Des Voitures Louées"))
        self.actionDes_Voitures_Lou_es_entre_2_Dates.setText(_translate("MainWindow", "Des Voitures Louées entre 2 Dates"))
        self.actionAjouter_une_nouvelle_Location.setText(_translate("MainWindow", "Ajouter Contrat"))
        self.actionSupprimer_une_Location.setText(_translate("MainWindow", "Supprimer Contrat"))
        self.actionModifier_la_Date_de_Location.setText(_translate("MainWindow", "Modifier la Date de Location"))
        self.actionModifier_la_Dur_e.setText(_translate("MainWindow", "Modifier la Durée"))
        self.actionAffichage_3.setText(_translate("MainWindow", "Affichage"))
        self.actionpar_CIN.setText(_translate("MainWindow", "par CIN"))
        self.actionpar_Matricule.setText(_translate("MainWindow", "par Matricule"))
        self.actionpar_Date_Donn_e.setText(_translate("MainWindow", "par Date Donnée"))
        self.actionpar_Dur_e_de_Location.setText(_translate("MainWindow", "par Durée de Location"))
        self.actionpar_Location_entre_2_Dates.setText(_translate("MainWindow", "par Location entre 2 Dates"))
        self.actionEnregistrement_Fichier_Voitures.setText(_translate("MainWindow", "Enregistrement Fichier Voitures"))
        self.actionR_cup_ration_Fichier_Voitures.setText(_translate("MainWindow", "Récupération Fichier Voitures"))
        self.actionEnregistrement_Fichier_Client.setText(_translate("MainWindow", "Enregistrement Fichier Client"))
        self.actionR_cup_ration_Fichier_Client.setText(_translate("MainWindow", "Récupération Fichier Client"))
        self.actionEnregistrement_Fichier_Location.setText(_translate("MainWindow", "Enregistrement Fichier Location"))
        self.actionR_cup_ration_Fichier_Location.setText(_translate("MainWindow", "Récupération Fichier Location"))
        self.actionsupprimer_Voiture.setText(_translate("MainWindow", "Supprimer Voiture"))
        self.actionmodifier_Voiture.setText(_translate("MainWindow", "Modifier Voiture"))
        self.actionRecherche.setText(_translate("MainWindow", "Recherche"))
        self.actionModifier_un_Client.setText(_translate("MainWindow", "Modifier Client"))
        self.actionModifier_une_Location.setText(_translate("MainWindow", "Modifier Contrat"))
        self.actionRecherche_2.setText(_translate("MainWindow", "Recherche"))
        self.actionPage_Principale.setText(_translate("MainWindow", "Page Principale"))
        self.actionR_cup_rer_Tous.setText(_translate("MainWindow", "Récupérer Tous"))
        self.actionEnregistrer_Tous.setText(_translate("MainWindow", "Enregistrer Tous"))
import mothak2


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
